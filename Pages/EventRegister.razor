@page "/events/register"
@using EventEaseApp.Models
@inject UserSessionService UserSession



<h3>Register for an Event</h3>

<EditForm Model="registration" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name">Name</label>
        <InputText @bind-Value="registration.Name" class="form-control" id="name" />
        <ValidationMessage For="@(() => registration.Name)" />
    </div>

    <div class="mb-3">
        <label for="email">Email</label>
        <InputText @bind-Value="registration.Email" class="form-control" id="email" />
        <ValidationMessage For="@(() => registration.Email)" />
    </div>

    <div class="mb-3">
        <label for="event">Select Event</label>
        <InputSelect @bind-Value="registration.SelectedEvent" class="form-control" id="event">
            <option value="">-- Select --</option>
            @foreach (var evt in Events)
            {
                <option value="@evt.Name">@evt.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => registration.SelectedEvent)" />
    </div>

    <button class="btn btn-success" type="submit">Register</button>
</EditForm>

@if (UserSession.UserName != null)
{
    <p class="mt-4 alert alert-info">
        ✅ Thank you, <b>@UserSession.UserName</b>. You’re registered for <b>@UserSession.RegisteredEvent</b>.
    </p>
}

@code {
    [Inject]
    private ILogger<EventRegister>? Logger { get; set; }
    private RegistrationModel registration = new();
    private List<EventModel> Events = new EventManager().GetAllEvents();

    private void HandleValidSubmit()
    {
        UserSession.UserName = registration.Name;
        UserSession.UserEmail = registration.Email;
        UserSession.RegisteredEvent = registration.SelectedEvent;
        Logger?.LogInformation($"User {registration.Name} registered for {registration.SelectedEvent} registered successfully.");
        StateHasChanged();
    }
}
